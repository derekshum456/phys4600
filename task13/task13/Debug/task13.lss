
task13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d8  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000640  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000260  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035b  00000000  00000000  0000118c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000014e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 67 00 	call	0xce	; 0xce <main>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
#include <util/delay.h>


void setup()
{
	SPCR |= (1<<SPE);
  80:	8c b5       	in	r24, 0x2c	; 44
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8c bd       	out	0x2c, r24	; 44

	SPCR &=~ (1<<SPIE);
  86:	8c b5       	in	r24, 0x2c	; 44
  88:	8f 77       	andi	r24, 0x7F	; 127
  8a:	8c bd       	out	0x2c, r24	; 44

	SPCR &=~ (1<<DORD);
  8c:	8c b5       	in	r24, 0x2c	; 44
  8e:	8f 7d       	andi	r24, 0xDF	; 223
  90:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<MSTR);
  92:	8c b5       	in	r24, 0x2c	; 44
  94:	80 61       	ori	r24, 0x10	; 16
  96:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<CPOL);
  98:	8c b5       	in	r24, 0x2c	; 44
  9a:	88 60       	ori	r24, 0x08	; 8
  9c:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ (1<<CPHA);
  9e:	8c b5       	in	r24, 0x2c	; 44
  a0:	8b 7f       	andi	r24, 0xFB	; 251
  a2:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ (1<<SPR1);
  a4:	8c b5       	in	r24, 0x2c	; 44
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ (1<<SPR0);
  aa:	8c b5       	in	r24, 0x2c	; 44
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	8c bd       	out	0x2c, r24	; 44

	//SPDR = DATA REGISTER;

	DDRB |= (1<<PB3)|(1<<PB5)|(1<<PB2)|(1<<PB6); //mosi|sck|ss
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	8c 66       	ori	r24, 0x6C	; 108
  b4:	84 b9       	out	0x04, r24	; 4
  b6:	08 95       	ret

000000b8 <loop>:
{
	uint8_t data;
	uint8_t datarecieved;
	
	
		PORTB &= ~(1<<PB6); // pulls chip low bit 1
  b8:	2e 98       	cbi	0x05, 6	; 5
		
		SPDR = data;
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	8e bd       	out	0x2e, r24	; 46
			
		PORTB &= ~(1<<PB6); // pulls chip low bit 2
  be:	2e 98       	cbi	0x05, 6	; 5
		
		SPDR = data;
  c0:	8e bd       	out	0x2e, r24	; 46
		
		while(!(SPSR & (1<<SPIF)));
  c2:	0d b4       	in	r0, 0x2d	; 45
  c4:	07 fe       	sbrs	r0, 7
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <loop+0xa>

		datarecieved = SPDR;
  c8:	8e b5       	in	r24, 0x2e	; 46

		PORTB |= (1<<PB6); // set chip select high
  ca:	2e 9a       	sbi	0x05, 6	; 5
  cc:	08 95       	ret

000000ce <main>:
	
}

int main(void)
{
	setup();
  ce:	0e 94 40 00 	call	0x80	; 0x80 <setup>
	
	
	while(1){ loop();}
  d2:	0e 94 5c 00 	call	0xb8	; 0xb8 <loop>
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <main+0x4>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
