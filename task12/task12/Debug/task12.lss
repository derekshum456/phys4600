
task12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075b  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b8  00000000  00000000  00000933  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d4  00000000  00000000  00000feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a6  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000065  00000000  00000000  000016aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000170f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
#include <util/delay.h>


void setup()
{
SPCR |= (1<<SPE);
  80:	8c b5       	in	r24, 0x2c	; 44
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8c bd       	out	0x2c, r24	; 44

SPCR &=~ (1<<SPIE);
  86:	8c b5       	in	r24, 0x2c	; 44
  88:	8f 77       	andi	r24, 0x7F	; 127
  8a:	8c bd       	out	0x2c, r24	; 44

SPCR &=~ (1<<DORD);
  8c:	8c b5       	in	r24, 0x2c	; 44
  8e:	8f 7d       	andi	r24, 0xDF	; 223
  90:	8c bd       	out	0x2c, r24	; 44
SPCR |= (1<<MSTR);
  92:	8c b5       	in	r24, 0x2c	; 44
  94:	80 61       	ori	r24, 0x10	; 16
  96:	8c bd       	out	0x2c, r24	; 44
SPCR |= (1<<CPOL);
  98:	8c b5       	in	r24, 0x2c	; 44
  9a:	88 60       	ori	r24, 0x08	; 8
  9c:	8c bd       	out	0x2c, r24	; 44
SPCR &=~ (1<<CPHA);
  9e:	8c b5       	in	r24, 0x2c	; 44
  a0:	8b 7f       	andi	r24, 0xFB	; 251
  a2:	8c bd       	out	0x2c, r24	; 44
SPCR &=~ (1<<SPR1);
  a4:	8c b5       	in	r24, 0x2c	; 44
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	8c bd       	out	0x2c, r24	; 44
SPCR &=~ (1<<SPR0);
  aa:	8c b5       	in	r24, 0x2c	; 44
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	8c bd       	out	0x2c, r24	; 44

//SPDR = DATA REGISTER;

DDRB |= (1<<PB3)|(1<<PB5)|(1<<PB2)|(1<<PB6); //mosi|sck|ss
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	8c 66       	ori	r24, 0x6C	; 108
  b4:	84 b9       	out	0x04, r24	; 4
  b6:	08 95       	ret

000000b8 <loop>:
void loop()
{
	uint8_t data;
	uint8_t datarecieved;
		
	for(data = 1;data<256; data++)
  b8:	81 e0       	ldi	r24, 0x01	; 1
	{
		PORTB &= ~(1<<PB6); // pulls chip low
  ba:	2e 98       	cbi	0x05, 6	; 5

		SPDR = data;
  bc:	8e bd       	out	0x2e, r24	; 46

		while(!(SPSR & (1<<SPIF)));
  be:	0d b4       	in	r0, 0x2d	; 45
  c0:	07 fe       	sbrs	r0, 7
  c2:	fd cf       	rjmp	.-6      	; 0xbe <loop+0x6>

		datarecieved = SPDR;
  c4:	9e b5       	in	r25, 0x2e	; 46

		PORTB |= (1<<PB6); // set chip select high
  c6:	2e 9a       	sbi	0x05, 6	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	e3 ed       	ldi	r30, 0xD3	; 211
  ca:	f0 e3       	ldi	r31, 0x30	; 48
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <loop+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <loop+0x1a>
  d2:	00 00       	nop
void loop()
{
	uint8_t data;
	uint8_t datarecieved;
		
	for(data = 1;data<256; data++)
  d4:	8f 5f       	subi	r24, 0xFF	; 255

		datarecieved = SPDR;

		PORTB |= (1<<PB6); // set chip select high
		_delay_ms(50);
	}
  d6:	f1 cf       	rjmp	.-30     	; 0xba <loop+0x2>

000000d8 <main>:
}

int main(void)
{
    setup();
  d8:	0e 94 40 00 	call	0x80	; 0x80 <setup>
    
    
    while(1){ loop();}
  dc:	0e 94 5c 00 	call	0xb8	; 0xb8 <loop>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
